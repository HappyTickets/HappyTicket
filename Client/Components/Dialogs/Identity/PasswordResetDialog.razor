@inject ICustomSnackbarProvider _snackbar
@inject IIdentityService _identityService
@inject ILocalStorageService _localStorage

<LanguageTrackProvider OnInitializeEvent="provider => provider.RegisterComponent(this)" />

<EditForm Model="resetPasswordRequest">
    <DataAnnotationsValidator />
    <MudDialog ClassActions="d-flex justify-end">
        <DialogContent>
            <MudTextField T="string" Label=@Resource.Email @bind-Value="resetPasswordRequest.Email" HelperText=@Resource.EmailHelperText For="(() => resetPasswordRequest.Email)" Immediate="true" Required />
        </DialogContent>
        <DialogActions>
            <LoadingButton OnClick="Submit" Disabled=@(!IsFormValidToProceedWith()) FullWidth Variant="Variant.Outlined">@Resource.Submit</LoadingButton>
            <LoadingButton OnClick="Cancel" FullWidth Variant="Variant.Outlined">@Resource.Cancel</LoadingButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    private CreatePasswordResetTokenRequest resetPasswordRequest = new CreatePasswordResetTokenRequest();
    bool? _isValid = null;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;

    private bool IsFormValidToProceedWith()
    {
        var result = !string.IsNullOrWhiteSpace(resetPasswordRequest.Email);

        return result;
    }

    private async Task Submit()
    {
        if (!IsFormValidToProceedWith()) return;
        try
        {
            var response = await _identityService.CreatePasswordResetTokenAsync(resetPasswordRequest);
            await response.Match<Task<Unit>>(
                async Succ =>
                {
                    if (Succ.IsSuccess)
                    {
                        await _localStorage.SetItemAsStringAsync("email", resetPasswordRequest.Email);
                        _snackbar.Show(@Resource.ResetPasswordEmailSentMessage, Severity.Success);
                        MudDialog.Close(DialogResult.Ok(true));
                    }
                    else
                    {
                        _snackbar.Show(Succ.Title, Severity.Error);
                        Succ.ErrorList?.ToList().ForEach(m => _snackbar.Show($"{m.Title.Humanize()}: {m.Message.Humanize()}.", Severity.Error));
                    }
                    return new Unit();
                },
                async Fail => { _snackbar.Show($"{@Resource.Password_Reset_Request_Fail}: {Fail.Message.Humanize()}.", Severity.Error); return await Task.FromResult<Unit>(new Unit()); }
            );
        }
        catch
        {
            
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
