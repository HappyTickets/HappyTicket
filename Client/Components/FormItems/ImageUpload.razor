<LanguageTrackProvider OnInitializeEvent="provider => provider.RegisterComponent(this)" />

<MudStack Style=@($"width: {Width}; height: {Height};") >
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                   AppendMultipleFiles=IsMultipleFiles
                   OnFilesChanged=OnInputFileChanged
                   Hidden=false 
                   Accept=".png, .jpeg, .jpg, .tiff, .bmp"
                   Class="d-block"
                   InputClass="absolute mud-width-full overflow-hidden z-20 h-100"
                   InputStyle="opacity:0"
                   Disabled=Disabled
                   Required=Required
                   @ondragenter=@SetDragClass
                   @ondragleave=@ClearDragClass
                   @ondragend=@ClearDragClass>
         <ButtonTemplate>
             <MudPaper Outlined="true"
                       Class="@_dragClass"
                       Width=@Width
                       Height=@Height>
                @if (Files.Count == 0)
                {
                    <MudText Typo="Typo.h6" Class=@(Disabled ? "mud-text-disabled" : "")>
                        @Resource.DragDrop @Label
                        (@Resource.Max_size_10MB!)
                    </MudText>
                }

                <div class="d-flex gap-2 flex-wrap">
                    @foreach (var image in IsMultipleFiles ? Files : Files.TakeLast(1))
                    {
                        <MudPaper Class="d-flex flex-column justify-content-center align-items-center gap-2 p-2" Style="width: fit-content">
                            <MudImage Src=@image.Value Alt=@image.Key Height=50 Width=50 />
                            <MudText Typo=Typo.body2 Align=Align.Center>@image.Key</MudText>
                        </MudPaper>
                    }
                </div>
            </MudPaper>
        </ButtonTemplate>
    </MudFileUpload>
</MudStack>

@code {
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mud-width-full z-10";
    private string _dragClass = DefaultDragClass;

    [Parameter]
    public string Width { get; set; } = "100%";
    [Parameter]
    public string Height { get; set; } = "300px";
    [Parameter]
    public bool Disabled { get; set; } = false;
    [Parameter]
    public bool Required { get; set; } = false;
    [Parameter]
    public bool IsMultipleFiles { get; set; } = false;
    [Parameter]
    public string Label { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<IEnumerable<IBrowserFile>> InputFilesChanged { get; set; }
    [Parameter]
    public Dictionary<string, string> Files { get; set; } = [];
    [Parameter]
    public EventCallback<Dictionary<string, string>> FilesChanged { get; set; }

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles().Where(i => i.Size <= 10485760);
        if (IsMultipleFiles)
        {
            foreach (var file in files)
            {
                Files.Add(file.Name, await file.ConvertStreamTobase64Async());
            }

        }
        else if (files.Any())
        {
            Files = new() { { files.First().Name, await files.First().ConvertStreamTobase64Async() } };
        }
        if (InputFilesChanged.HasDelegate) await InputFilesChanged.InvokeAsync(files);
        if (FilesChanged.HasDelegate) await FilesChanged.InvokeAsync(Files);
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}