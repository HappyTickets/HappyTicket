@* @page "/ResetPassword/{Token}"

@inject ICustomSnackbarProvider Snackbar
@inject IIdentityService identityService
@inject ILocalStorageService localStorage
@inject NavigationManager navigation

<LanguageTrackProvider OnInitializeEvent="provider => provider.RegisterComponent(this)" />
<PageTitle>@Resource.Password_Reset</PageTitle>

@if (_loading)
{
    <MudText>@Resource.Loading</MudText>
}
else
{
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h4">@Resource.Password_Reset</MudText>
            <MudTextField T="string" Value="_email" Label=@Resource.Email InputType="InputType.Email" Required />
            <MudTextField @bind-Value="_resetPasswordRequest.NewPassword" Label=@Resource.Password InputType="InputType.Password" Required />
            <MudTextField @bind-Value="_resetPasswordRequest.ConfirmNewPassword" Label=@($"{Resource.Confirm} {Resource.Password}") InputType="InputType.Password" Required />
            <LoadingButton OnClick="Submit" Color="Color.Primary" Variant="Variant.Filled">@Resource.Password_Reset</LoadingButton>
        </MudCardContent>
    </MudCard>
}


@code {
    private bool _loading = true;
    private string? _email = null;
    private ResetPasswordRequest _resetPasswordRequest = new();

    [Parameter]
    public string Token { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            _email = await localStorage.GetItemAsStringAsync("email");
            _resetPasswordRequest.Email = _email;
            if (!string.IsNullOrWhiteSpace(Token))
            {
                _resetPasswordRequest.Token =  Token;
                StateHasChanged();
            }
            else
            {
                Snackbar.Show(Resource.Token_NotFound, Severity.Error);
                navigation.NavigateTo("/login", true);
            }
            _loading = false;
        }
        catch (Exception ex)
        {
            Snackbar.Show(ex.Message, Severity.Error);
            navigation.NavigateTo("/login", true);
        }
    }

    private async Task Submit()
    {
        if (_resetPasswordRequest.NewPassword != _resetPasswordRequest.ConfirmNewPassword)
        {
            Snackbar.Show(Resource.Passwords_NotMatching, Severity.Error);
        }
        else
        {
            var result = await identityService.ResetPasswordAsync(_resetPasswordRequest);
            _ = result.Match(
                Succ =>
                {
                    if (Succ.IsSuccess)
                    {
                        Snackbar.Show($"{Resource.Password_Reset_Success} 🎊🎊🎊", Severity.Success);
                        Snackbar.Show(Resource.Login_Redirect, Severity.Normal);
                        navigation.NavigateTo("/login", true);
                    }
                    else
                    {
                        Snackbar.Show(Resource.Password_Reset_Fail, Severity.Error);
                        Succ.ErrorList?.ToList().ForEach(err => Snackbar.Show($"{err.Title.Humanize()}: {err.Message.Humanize()}.", Severity.Error));
                    }
                    return new Unit();
                },
                Fail =>
                {
                    Snackbar.Show(Fail.Message.Humanize(), Severity.Error);
                    return new Unit();
                }
            );
        }
    }
}
 *@