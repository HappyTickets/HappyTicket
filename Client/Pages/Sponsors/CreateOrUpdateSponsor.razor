@page "/sponsors/create"
@page "/sponsors/update/{id:long}"
@using Client.Services._File
@using Client.Services.Sponsors
@using Shared.DTOs.Sponsors

@inject ICustomSnackbarProvider Snackbar
@inject ISponsorService SponsorService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IFileService FileService
@attribute [Authorize(Policy = "IsAdmin")]

<LanguageTrackProvider OnInitializeEvent="provider => provider.RegisterComponent(this)" />
<PageTitle>
    @(IsUpdate() ? Resource.Sponsor_Update : Resource.Sponsor_Create)
</PageTitle>

<MudCard>
    <MudCardContent>
        <h1 class="fs-2 mb-5">@(IsUpdate() ? Resource.Sponsor_Update : Resource.Sponsor_Create)</h1>
        <EditForm Model="Sponsor">
            <div class="mb-5">
                <MudTextField @bind-Value=Sponsor.Name  Label=@Resource.Name Variant="Variant.Text" Required />
            </div>
            <div class="mb-5 py-2">
                <ImageUpload Label=@Resource.Logo IsMultipleFiles="false" FilesChanged="OnFileChanged" Required="true" />
            </div>
            <div class="mb-5 py-2">
                <MudCheckBox @bind-Value=Sponsor.IsHappySponsor Label=@Resource.Is_Happy_Sponsor Color="@Color.Primary" UncheckedColor="@Color.Default"></MudCheckBox>
            </div>
            <div class="d-flex justify-content-end">
                <LoadingButton OnClick="HandleValidSubmit" Color="Color.Primary" Variant="Variant.Filled">@(IsUpdate() ? Resource.Sponsor_Update : Resource.Sponsor_Create)</LoadingButton>
            </div>
        </EditForm>
    </MudCardContent>
</MudCard>


@code {
    [Parameter]
    public long? Id { get; set; }

    private CreateOrUpdateSponsorDto Sponsor = new();
    KeyValuePair<string, string>? Logo = null;


    protected override async Task OnInitializedAsync()
    {
        await LoadSponsorAsync();
    }

    private async Task LoadSponsorAsync()
    {
        if(IsUpdate())
        {
            try {
                var response = await SponsorService.GetByIdAsync(Id!.Value);

                if (response.IsSuccess)
                    Sponsor = new CreateOrUpdateSponsorDto
                {
                    Name = response.Data.Name,
                    Logo = response.Data.Logo,
                    IsHappySponsor = response.Data.IsHappySponsor
                };
            }
            catch
            {
                Snackbar.Show(Resource.Error_Occurred, Severity.Error);
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        if (Sponsor.Name == null)
            return;

        if (Logo != null)
            await UploadFileAsync();

        if (Sponsor.Logo != null)
        {
            if (IsUpdate())
                await UpdateSponsorAsync();
            else
                await CreateSponsorAsync();
        }
        else
            Snackbar.Show(Resource.File_Required, Severity.Error);
    }

    private async Task UploadFileAsync()
    {
        try {
            var response = await FileService.UploadFileAsync(new()
                {
                    Path = $"/Images/Sponsors/{Sponsor.Name}/{Logo?.Key}".Replace(" ", "_"),
                    Base64EncodedString = Logo?.Value
                });

            if (response.IsSuccess)
                Sponsor.Logo = response.Data;
            else
                Snackbar.Show(Resource.File_Upoad_Error, Severity.Error);
        }
        catch
        {
            Snackbar.Show(Resource.Error_Occurred, Severity.Error);
        }
    }

    private async Task CreateSponsorAsync()
    {
        try
        {
            var response = await SponsorService.CreateAsync(Sponsor);

            if (response.IsSuccess)
            {
                Snackbar.Show(Resource.Sponsor_Created, Severity.Success);
                NavigationManager.NavigateTo("/sponsors");
            }
            else
            {
                Snackbar.Show(response.Title, Severity.Error);
                if (response.ErrorList != null)
                {
                    foreach (var error in response.ErrorList)
                        Snackbar.Show($"{error.Title}: {error.Message}", Severity.Error);
                }
            }
        }
        catch
        {
            Snackbar.Show(Resource.Error_Occurred, Severity.Error);
        }
    }

    private async Task UpdateSponsorAsync()
    {
        try
        {
            var resposne = await SponsorService.UpdateAsync(Id.Value, Sponsor);

            if (resposne.IsSuccess)
            {
                Snackbar.Show(Resource.Sponsor_Updated, Severity.Success);
                NavigationManager.NavigateTo("/sponsors");
            }
            else
            {
                Snackbar.Show(resposne.Title, Severity.Error);
                if (resposne.ErrorList != null)
                {
                    foreach (var error in resposne.ErrorList)
                        Snackbar.Show($"{error.Title}: {error.Message}", Severity.Error);
                }
            }
        }
        catch
        {
            Snackbar.Show(Resource.Error_Occurred, Severity.Error);
        }
    }

    private void OnFileChanged(Dictionary<string, string> files)
        => Logo = files.FirstOrDefault();

    private bool IsUpdate()
        => Id != null;
}
