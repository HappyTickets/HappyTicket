@page "/match/create"
@using Shared.DTOs.Champion

@inject ICustomSnackbarProvider Snackbar
@inject BITeamService TeamService
@inject BIMatchService MatchService
@inject IDialogService DialogService
@inject IChampionService ChampionService
@inject BIStadiumService StadiumService
@inject NavigationManager NavigationManager
@* @attribute [Authorize(Policy = "IsAdmin")] *@

<LanguageTrackProvider OnInitializeEvent="provider => provider.RegisterComponent(this)" />
<PageTitle>@Resource.Create @Resource.Match</PageTitle>

<MudPaper Class="mt-2">
    <MudGrid Class="pa-4 gap-2">
        <MudItem xs="12">
            <MudText Typo="Typo.h5" Style="font-weight:bold;">@Resource.Create @Resource.NewMatch</MudText>
        </MudItem>
        <MudItem xs="12">
            <MudGrid>
                @if (teams == null || stadiums == null)
                {
                    <MudItem xs="12">
                        <MudText Typo="Typo.h6">@Resource.Loading</MudText>
                    </MudItem>
                }
                else
                {
                    <MudItem xs="12">
                        <MudSelect T="Guid?" Label=@Resource.HomeTeam Value="match.TeamAId" ValueChanged="ChangeTeamA" ToStringFunc="@(x => (x == null || x == Guid.Empty) ? $"{Resource.Add} {Resource.NewTeam}" : teams.FirstOrDefault(y => y.Id == x)?.Name)" Required>
                            @foreach (var team in teams.Where(x => x.Id != Guid.Empty))
                            {
                                <MudSelectItem T="Guid?" Value="@team.Id">@team.Name</MudSelectItem>
                            }
                            <MudSelectItem T="Guid?" Value="null">@Resource.Add @Resource.NewTeam</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12">
                        <MudSelect T="Guid?" Label=@Resource.AwayTeam Value="match.TeamBId" ValueChanged="ChangeTeamB" ToStringFunc="@(x => (x == null || x == Guid.Empty) ? $"{Resource.Add} {Resource.NewTeam}" : teams.FirstOrDefault(y => y.Id == x)?.Name)" Required>
                            @foreach (var team in teams.Where(x => x.Id != Guid.Empty))
                            {
                                <MudSelectItem T="Guid?" Value="@team.Id">@team.Name</MudSelectItem>
                            }
                            <MudSelectItem T="Guid?" Value="null">@Resource.Add @Resource.NewTeam</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12">
                        <MudSelect T="Guid?" Label=@Resource.Stadium Value="match.StadiumId" ValueChanged="ChangeStadium" ToStringFunc="@(x => (x == null || x == Guid.Empty) ? $"{Resource.Add} {Resource.NewStadium}" : stadiums.FirstOrDefault(y => y.Id == x)?.Name)" Required>
                            @foreach (var stadium in stadiums.Where(x => x.Id != Guid.Empty))
                            {
                                <MudSelectItem T="Guid?" Value="@stadium.Id">@stadium.Name</MudSelectItem>
                            }
                            <MudSelectItem T="Guid?" Value="null">@Resource.Add @Resource.NewStadium</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12">
                        <MudSelect T="Guid?" Label=@Resource.Champion Value="match.ChampionId" ValueChanged="ChangeChampion" ToStringFunc="@(x => (x == null || x == Guid.Empty) ? $"{Resource.Add} {Resource.NewChampion}" : champions.FirstOrDefault(y => y.Id == x)?.Name)" Required>
                            @foreach (var champion in champions.Where(x => x.Id != Guid.Empty))
                            {
                                <MudSelectItem T="Guid?" Value="@champion.Id">@champion.Name</MudSelectItem>
                            }
                            <MudSelectItem T="Guid?" Value="null">@Resource.Add @Resource.NewChampion</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12">
                        <MudNumericField @bind-Value=match.MaxPerUser Label=@Resource.TicketPerCustomer Variant="Variant.Text" Min="1" Required />
                    </MudItem>
                    <MudItem xs="12">
                        <label for="matchDateTime">@Resource.Match_DateTime</label>
                        <MudGrid>
                            <MudItem xs="12" md="6">
                                <MudDatePicker @bind-Date="match.EventDate" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.BottomCenter" Label=@Resource.Date Variant="Variant.Text" />
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudTimePicker @bind-Time="match.EventTime" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.BottomCenter" Label=@Resource.Time Variant="Variant.Text" AmPm />
                            </MudItem>
                        </MudGrid>
                        @* <DateTimePicker @bind-DateTime=@match.EventDate Label="Match Date" /> *@
                    </MudItem>
                    <MudItem xs="12" Class="d-flex justify-end">
                        <LoadingButton OnClick="CreateMatch" Color="Color.Primary" Variant="Variant.Filled">@Resource.Create @Resource.Match</LoadingButton>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>
    </MudGrid>
</MudPaper>

<CreateTeamDialog OnTeamCreated="ReloadTeams" @bind-IsVisible=showCreateTeamDialog />
<CreateStadiumDialog OnStadiumCreated="ReloadStadiums" @bind-IsVisible=showCreateStadiumDialog />
<CreateChampionDialog OnChampionCreated="ReloadChampions" @bind-IsVisible=showCreateChampionDialog />

@code {
    private MatchCommandDto match = new MatchCommandDto();
    private List<TeamDto> teams = new List<TeamDto>();
    private List<StadiumDto> stadiums = new List<StadiumDto>();
    private List<ChampionDto> champions = new List<ChampionDto>();
    private MudDialog createTeamDialog;
    private MudDialog createStadiumDialog;
    private bool showCreateTeamDialog;
    private bool showCreateStadiumDialog;
    private bool showCreateChampionDialog;

    protected override async Task OnInitializedAsync()
    {
        await LoadTeamsAndStadiums();
    }

    private async Task LoadTeamsAndStadiums()
    {
        await ReloadTeams();
        await ReloadStadiums();
        await ReloadChampions();
    }


    private void ChangeTeamA(Guid? teamId)
    {
        if (teamId == null || teamId == Guid.Empty)
        {
            showCreateTeamDialog = true;
            return;
        }
        match.TeamAId = teamId!.Value;
    }
    private void ChangeTeamB(Guid? teamId)
    {
        if (teamId == null || teamId == Guid.Empty)
        {
            showCreateTeamDialog = true;
            return;
        }
        match.TeamBId = teamId!.Value;
    }
    private void ChangeStadium(Guid? stadiumId)
    {
        if (stadiumId == null || stadiumId == Guid.Empty)
        {
            showCreateStadiumDialog = true;
            return;
        }

        match.StadiumId = stadiumId!.Value;
    }
    private void ChangeChampion(Guid? championId)
    {
        if (championId == null || championId == Guid.Empty)
        {
            showCreateChampionDialog = true;
            return;
        }

        match.ChampionId = championId!.Value;
    }

    private async Task CreateMatch()
    {
        if (ValidateForm())
        {
            var response = await MatchService.CreateMatchAsync(match);
            response.Match(
                succ =>
                {
                    if (succ.IsSuccess)
                    {
                        Snackbar.Show(Resource.Match_Create_Success, Severity.Success);
                        // Snackbar.Show(succ.Title, Severity.Info);
                        NavigationManager.NavigateTo("/matches");
                    }
                    else
                    {
                        Snackbar.Show($"{Resource.Match_Create_Fail}", Severity.Error);
                        Snackbar.Show(succ.Title, Severity.Error);
                        succ.ErrorList?.ToList().ForEach(x => Snackbar.Show($"{x.Title}: {x.Message}", Severity.Error));
                    }
                    return new Unit();
                },
                fail =>
                {
                    teams ??= [];
                    Snackbar.Show(Resource.Error_Occurred, Severity.Error);
                    return new Unit();
                }
            );
        }
        else
        {
            Snackbar.Show(Resource.RequiredFields, Severity.Error);
        }
    }

    private void ShowCreateStadiumDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<CreateStadiumDialog>(Resource.Stadium_Add, options);
    }

    private async Task ReloadTeams()
    {
        var teamResponse = await TeamService.GetTeamsAsync(false);
        _ = teamResponse.Match(
            succ =>
            {
                teams = succ.Data?.ToList() ?? [];
                if (!succ.IsSuccess)
                {
                    Snackbar.Show(Resource.Teams_Load_Fail, Severity.Error);
                }
                succ.ErrorList?.ToList().ForEach(x => Snackbar.Show($"{x.Title}: {x.Message}", Severity.Error));
                // Snackbar.Show(succ.Title, Severity.Info);
                return new Unit();
            },
            fail =>
            {
                teams ??= [];
                Snackbar.Show(Resource.Error_Occurred, Severity.Error);
                return new Unit();
            }
        );
        StateHasChanged();
    }

    private async Task ReloadStadiums()
    {
        var stadiumResponse = await StadiumService.GetStadiumsAsync(false);
        _ = stadiumResponse.Match(
            succ =>
            {
                stadiums = succ.Data?.ToList() ?? [];
                if (!succ.IsSuccess)
                {
                    Snackbar.Show(Resource.Stadia_Load_Fail, Severity.Error);
                }
                succ.ErrorList?.ToList().ForEach(x => Snackbar.Show($"{x.Title}: {x.Message}", Severity.Error));
                // Snackbar.Show(succ.Title, Severity.Info);
                return new Unit();
            },
            fail =>
            {
                stadiums ??= [];
                Snackbar.Show(Resource.Error_Occurred, Severity.Error);
                Console.WriteLine(fail.Message);
                return new Unit();
            }
        );
        StateHasChanged();
    }
    private async Task ReloadChampions()
    {
        var championResponse = await ChampionService.GetChampionsAsync(false);
        _ = championResponse.Match(
            succ =>
            {
                champions = succ.Data?.ToList() ?? [];
                if (!succ.IsSuccess)
                {
                    Snackbar.Show(Resource.Stadia_Load_Fail, Severity.Error);
                }
                succ.ErrorList?.ToList().ForEach(x => Snackbar.Show($"{x.Title}: {x.Message}", Severity.Error));
                // Snackbar.Show(succ.Title, Severity.Info);
                return new Unit();
            },
            fail =>
            {
                stadiums ??= [];
                Snackbar.Show(Resource.Error_Occurred, Severity.Error);
                Console.WriteLine(fail.Message);
                return new Unit();
            }
        );
        StateHasChanged();
    }

    private bool ValidateForm()
    {
        return match.TeamAId != Guid.Empty && match.TeamBId != Guid.Empty && match.StadiumId != Guid.Empty && match.EventDate != null && match.EventTime != null && match.ChampionId != Guid.Empty;
    }
}
