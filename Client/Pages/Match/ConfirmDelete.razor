@inject BIMatchService MatchService
@inject ICustomSnackbarProvider Snackbar
<MudDialog>
    <DialogActions>
        <MudText Typo="Typo.h6">Are you sure to delete this match ?</MudText>
        <MudButton Color="Color.Primary" OnClick="CloseDialog">Cancel</MudButton>
        <MudButton OnClick="@(() => Delete_Click(Id))" Color="Color.Error" Variant="Variant.Filled">@Resource.Delete_Tickets</MudButton>
        
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter] public Guid Id { get; set; }

    private string DeleteResult { get; set; }

    void CloseDialog()
    {
        MudDialog.Close();
    }


    public async Task Delete_Click(Guid Id)
    {
        var result = await MatchService.DeleteMatchWithNoTicketsAsync(Id);
        result.Match(
            response =>
            {
                if (response.IsSuccess)
                {
                    DeleteResult = "Match is deleted";
                    Snackbar.Show(DeleteResult, Severity.Success);
                }
                else
                {
                    DeleteResult = $"Match Cannot be deleted";
                    Snackbar.Show(DeleteResult, Severity.Error);
                }
                return Unit.Default;
            },
            ex =>
            {
                Snackbar.Show(Resource.Error_Occurred, Severity.Error);
                return Unit.Default;
            }
        );
    }
}


    @*     //          if (result.IsSuccess)
        // {
        //     if (result.IsBottom)
        //     {
        //         DeleteResult = $"Match Cannot be deleted";
        //         Snackbar.Show(DeleteResult, Severity.Error);
        //     }
        //     else
        //     {
        //         DeleteResult = "Match is Deleted";
        //         Snackbar.Show(DeleteResult, Severity.Success);
        //     }
        // } *@