@page "/champions/assign-sponsors-to-champion"
@using Shared.DTOs.Champion

@inject ICustomSnackbarProvider Snackbar
@inject IChampionService ChampionService
@inject ISponsorService SponsorService
@inject IFileService FileService
@attribute [Authorize(Policy = "IsAdmin")]

<PageTitle>
    @Resource.Assign_Sponsors_To_Champion
</PageTitle>

<MudCard>
    <MudCardContent>
        <h1 class="fs-2 mb-5">
            @Resource.Assign_Sponsors_To_Champion
        </h1>

        <div class="mb-5">
            <MudSelect T=ChampionDto Label="@Resource.Champion" MultiSelection="false" Value="@SelectedChampion" ValueChanged="OnSelectedChampionChanged" ToStringFunc="ChampionToString">
                @foreach (var champion in Champions)
                {
                    <MudSelectItem T=ChampionDto Value="@champion">
                        @champion.Name
                    </MudSelectItem>
                }
            </MudSelect>
        </div>
        <div class="mb-5">
            <MudSelect T=Guid Label="@Resource.Sponsors" MultiSelection="true" @bind-SelectedValues="@CreateOrUpdateChampion.SponsorsIds" ToStringFunc="SponsorIdToString" Disabled="SelectedChampion == null">
                @foreach (var sponsor in Sponsors)
                {
                    <MudSelectItem T=Guid Value="@sponsor.Id">
                        @sponsor.Name
                    </MudSelectItem>
                }
            </MudSelect>
        </div>
        <div class="d-flex justify-content-end">
            <LoadingButton OnClick="HandleValidSubmit" Color="Color.Primary" Variant="Variant.Filled" Disabled="SelectedChampion == null">@Resource.Save</LoadingButton>
        </div>
    </MudCardContent>
</MudCard>

@code {
    private List<SponsorDto> Sponsors = new();
    private List<ChampionDto> Champions = new();

    private ChampionDto? SelectedChampion;
    private CreateOrUpdateChampionDto CreateOrUpdateChampion = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadChampionsAsync();
        await LoadSponsorsAsync();
    }

    private async Task LoadChampionsAsync()
    {
        var result = await ChampionService.GetChampionsAsync(false);
        result.Match(
            response =>
            {
                if (response.Data != null)
                    Champions = response.Data.ToList();

                return Unit.Default;
            },
            ex => Unit.Default
        );
    }

    private async Task LoadSponsorsAsync()
    {
        var result = await SponsorService.GetSponsorsAsync(false);
        result.Match(
            response =>
            {
                if (response.Data != null)
                    Sponsors = response.Data.ToList();

                return Unit.Default;
            },
            ex => Unit.Default
        );
    }

    private async Task HandleValidSubmit()
    {
        var result = await ChampionService.UpdateChampionAsync(SelectedChampion!.Id, CreateOrUpdateChampion);
        await result.Match(
            async response =>
            {
                if (response.IsSuccess)
                {
                    Snackbar.Show(Resource.Assign_Sponsors_To_Champion_Success, Severity.Success);
                    await LoadChampionsAsync();
                }
                else
                    Snackbar.Show(Resource.Assign_Sponsors_To_Champion_Failure, Severity.Error);

                return Unit.Default;
            },
            async ex =>
            {
                await Task.CompletedTask;
                Snackbar.Show(Resource.Error_Occurred, Severity.Error);
                return Unit.Default;
            }
        );
    }

    private void OnSelectedChampionChanged(ChampionDto champion)
    {
        SelectedChampion = champion;
        CreateOrUpdateChampion.Name = champion.Name;
        CreateOrUpdateChampion.Logo = champion.Logo;
        CreateOrUpdateChampion.SponsorsIds = champion.ChampionSponsors?.Select(ts => ts.SponsorId);
    }

    private string SponsorIdToString(Guid id)
    => Sponsors.First(s => s.Id == id).Name;

    private string ChampionToString(ChampionDto champion)
        => champion.Name;
}