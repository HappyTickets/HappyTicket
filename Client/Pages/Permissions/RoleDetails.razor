@* @page "/role/unassign/{roleId}"
@using Client.Components.Dialogs.Permessions
@using Shared.DTOs.Authorization.Request
@using Shared.DTOs.Authorization.Response
@using Shared.DTOs.Identity.UserDTOs

@inject BIAuthorizationService AuthorizationService
@inject ICustomSnackbarProvider Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavManager

<LanguageTrackProvider OnInitializeEvent="provider => provider.RegisterComponent(this)" />

<MudCard Outlined="true">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@roleDetails.RoleName</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Size="Size.Large" Icon="@Icons.Material.Filled.Key" Color="Color.Primary" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudText Typo="Typo.body1">@roleDetails.Description</MudText>
        <MudText Typo="Typo.body2">@($"{usersList.Count} {Resource.UsersAssigned}")</MudText>
    </MudCardContent>
    <MudCardActions>

        <MudButton StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Warning" OnClick="OpenEditModal">@Resource.Edit</MudButton>

        <MudButton OnClick="OpenConfirmationDeleteDialog" Disabled="usersList.Count != 0" StartIcon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error" >@Resource.Delete</MudButton>
    </MudCardActions>
</MudCard>



<MudDataGrid @ref="dataGrid" ServerData="LoadRoleDetails" @bind-SelectedItems="selectedUsers" MultiSelection="true" T="ApplicationUserDTO" Filterable="false">


    <ToolBarContent>
        <MudText Style="text-wrap: nowrap;" Typo="Typo.h6">@Resource.AssignedUsers</MudText>
        <MudGrid Style="align-items:end" Justify="Justify.FlexEnd">

            <MudItem>
                <MudFab OnClick="OnSearch" Size="Size.Small" Disabled="string.IsNullOrEmpty(searchKey)" Color="Color.Primary" StartIcon="@Icons.Material.Outlined.Search" />
            </MudItem>

            <MudItem xs="6">
                <MudTextField T="string"
                              @bind-Value="searchString"
                              Placeholder="@Resource.SearchUsers"
                              Adornment="Adornment.Start"
                              IconSize="Size.Medium"
                              EndAdornmentIcon="@Icons.Material.Filled.ArrowDropDown">

                </MudTextField>
            </MudItem>

            <MudItem xs="4">
                <MudSelect @bind-Value="searchKey" Placeholder="@Resource.SelectSearchKey">
                    @foreach (var key in searchKeys)
                    {
                        <MudSelectItem Value="@key">@key</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

        </MudGrid>
    </ToolBarContent>

    <Columns>
        <SelectColumn ShowInFooter="false" T="ApplicationUserDTO" />

        <PropertyColumn Sortable="false" Property="x => x.UserName" Title="@Resource.Username">
            <FooterTemplate>

                <MudButton Disabled="selectedUsers.Count < 2 " StartIcon="@Icons.Material.Filled.People" EndIcon="@Icons.Material.Filled.Output"
                           OnClick="@(async () => await UnAssignUsersAsync())" Color="Color.Error" Variant="Variant.Filled">
                    @Resource.Unassign
                </MudButton>


            </FooterTemplate>
        </PropertyColumn>
        <PropertyColumn Sortable="false" Property="x => x.Email" Title="@Resource.Email" />

        <TemplateColumn Title="@Resource.Action" Sortable="false">

            <CellTemplate>

                <MudButton EndIcon="@Icons.Material.Filled.Output"
                           OnClick="() => UnAssignUserAsync(context.Item.Id)" Color="Color.Error" Variant="Variant.Filled"
                           Class="ml-2">
                    @Resource.Unassign
                </MudButton>
            </CellTemplate>


        </TemplateColumn>

    </Columns>

    <PagerContent>
        <MudDataGridPager T="ApplicationUserDTO" />
    </PagerContent>
</MudDataGrid>

<EditRoleDialog RoleId="@roleId" OnRoleEdited="ReloadRole" @bind-IsVisible=isEditModalVisible />

@code {
    MudDataGrid<ApplicationUserDTO> dataGrid;
    [Parameter] public string roleId { get; set; }
    private RoleWithUsersDto roleDetails = new();
    private List<ApplicationUserDTO> usersList = new();
    private System.Collections.Generic.HashSet<ApplicationUserDTO> selectedUsers = new();
    private PaginationSearchModel paginationSearchModel;
    private List<RoleDto> rolesList = new();
    private string searchString;
    private string searchKey;
    private List<string> searchKeys = new();

    protected override void OnInitialized()
    {
        searchKeys = GetUserSearchKeys();
    }
    private List<string> GetUserSearchKeys()
    {
        return typeof(SearchInKey.ApplicationUser)
             .GetFields(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static)
             .Select(f => f.GetValue(null).ToString())
             .ToList();
    }
    private async Task<GridData<ApplicationUserDTO>> LoadRoleDetails(GridState<ApplicationUserDTO> state)
    {
        try
        {
            // Update pagination and search model based on the grid state
            paginationSearchModel = new PaginationSearchModel
                {
                    PageIndex = state.Page,
                    PageSize = state.PageSize,
                    SearchIn = searchString,
                    SearchKey = searchKey
                };

            var response = await AuthorizationService.GetRoleWithUsersAsync(roleId, paginationSearchModel);

            GridData<ApplicationUserDTO> data = new GridData<ApplicationUserDTO>();

            response.Match(
                succ =>
                {
                    if (succ.Data is null)
                    {
                        foreach (var err in succ.ErrorList)
                        {
                            Snackbar.Show(err.Title, Severity.Error);
                        }
                        NavManager.NavigateTo("/roles");
                    }
                    else
                    {
                        roleDetails = succ.Data;

                        // Map users from the response to the ApplicationUserDTO list
                        usersList = roleDetails.AssignedUsers.Items.Select(user => new ApplicationUserDTO
                            {
                                Id = user.Id,
                                UserName = user.UserName,
                                Email = user.Email,
                            }).ToList();

                        data.Items = usersList.AsQueryable();
                        data.TotalItems = roleDetails.AssignedUsers.TotalItems;
                    }
                    return data; // Return the populated data
                },
                fail =>
                {
                    Snackbar.Show(Resource.LoadRoleFailed, Severity.Error);
                    return data;
                }
            );

            return data;
        }
        catch (Exception ex)
        {
            Snackbar.Show(Resource.LoadRoleFailed, Severity.Error);
            return new GridData<ApplicationUserDTO> // Return empty data in case of exception
                {
                    Items = Enumerable.Empty<ApplicationUserDTO>().AsQueryable(),
                    TotalItems = 0
                };
        }
    }


    private Task OnSearch()
    {
        return dataGrid.ReloadServerData();
    }



    private async Task OpenConfirmationDeleteDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var parameters = new DialogParameters<DeleteRoleDialog>
    {
        { x=>x.RoleId, roleId },
        { x=>x.OnRoleDeleted, EventCallback.Factory.Create(this, ()=>{NavManager.NavigateTo("/roles");}) }
    };

        var dialog = DialogService.Show<DeleteRoleDialog>(Resource.Delete + " " + Resource.Role, parameters, options);
    }
    private async Task ReloadRole()
    {
        try
        {
            var response = await AuthorizationService.GetRoleById(roleId);

            response.Match(
                succ =>
                {
                    roleDetails.RoleName = succ.Data.RoleName;
                    roleDetails.Description = succ.Data.RoleDescription;
                    usersList = roleDetails.AssignedUsers.Items.Select(user => new ApplicationUserDTO
                        {
                            Id = user.Id,
                            UserName = user.UserName,
                            Email = user.Email,
                        }).ToList();

                    return new Unit();
                },
                fail =>
                {
                    Snackbar.Show(Resource.LoadRoleFailed, Severity.Error);
                    return new Unit();
                }
            );
        }
        catch (Exception ex)
        {
            Snackbar.Show(Resource.LoadRoleFailed, Severity.Error);
        }
    }
    // private Func<ApplicationUserDTO, bool> _quickFilter => x =>
    // {
    //     if (string.IsNullOrWhiteSpace(searchString))
    //         return true;

    //     if (x.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
    //         return true;

    //     if (x.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
    //         return true;

    //     return false;
    // };
    private async Task UnAssignUserAsync(string userId)
    {
        try
        {
            var requestDto = new RemoveUsersFromRoleDto
                {
                    RoleId = roleId,
                    UserIds = [userId]
                };
            var response = await AuthorizationService.RemoveUsersFromRoleAsync(requestDto);
            response.Match(
                succ =>
                {
                    var deletedDto = usersList.Find(x => x.Id == userId);
                    usersList.Remove(deletedDto);

                    Snackbar.Show(Resource.UnassignUsersSuccessfully, Severity.Success);
                    return new Unit();
                },
                fail =>
                {
                    Snackbar.Show(Resource.UnassignUsersSuccessfully, Severity.Error);
                    return new Unit();
                }
            );
        }
        catch (Exception ex)
        {
            Snackbar.Show(Resource.UnassignUsersSuccessfully, Severity.Error);
        }
    }
    private async Task UnAssignUsersAsync()
    {
        try
        {
            var requestDto = new RemoveUsersFromRoleDto
                {
                    RoleId = roleId,
                    UserIds = selectedUsers.Select(u => u.Id).ToList()
                };
            var response = await AuthorizationService.RemoveUsersFromRoleAsync(requestDto);
            response.Match(
                succ =>
                {
                    foreach (var user in selectedUsers)
                    {
                        usersList.Remove(user);
                    }
                    selectedUsers.Clear();
                    Snackbar.Show(Resource.UnassignUsersSuccessfully, Severity.Success);
                    return new Unit();
                },
                fail =>
                {
                    Snackbar.Show(Resource.UnassignUsersSuccessfully, Severity.Error);
                    return new Unit();
                }
            );
        }
        catch (Exception ex)
        {
            Snackbar.Show(Resource.UnassignUsersSuccessfully, Severity.Error);
        }
    }
}
 *@